------- FILE pong.asm LEVEL 1 PASS 2
      1  10000 ????						;╔═════════════════════════════════════════════════════════════════════════════╗
      2  10000 ????						;║ Program Name: Pong 2600							  ║
      3  10000 ????						;║ Author: djudju12								  ║
      4  10000 ????						;╚═════════════════════════════════════════════════════════════════════════════╝
      5  10000 ????				       processor	6502
      6  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE pong.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE pong.asm
      9  0000 ????
     10  0000 ????
     11  0000 ????						;╔═════════════════════════════════════════════════════════════════════════════╗
     12  0000 ????						;║ Variables Segment 							  ║
     13  0000 ????						;╚═════════════════════════════════════════════════════════════════════════════╝
     14 U0087 ????				      seg.u	Variables
     15 U0080					      org	$80
     16 U0080
     17 U0080		       00	   Paddle0YPos byte.b
     18 U0081		       00	   Paddle1YPos byte.b
     19 U0082
     20 U0082		       00	   BallXPos   byte.b
     21 U0083		       00	   BallYPos   byte.b
     22 U0084		       00	   BallYDirection byte.b
     23 U0085		       00	   BallXDirection byte.b
     24 U0086
     25 U0086		       00	   Temp       byte.b
     26 U0087
     27 U0087							;╔═════════════════════════════════════════════════════════════════════════════╗
     28 U0087							;║ Constants Segment 							  ║
     29 U0087							;╚═════════════════════════════════════════════════════════════════════════════╝
     30 U0087		       00 a0	   COLOR_BG   =	$A0
     31 U0087		       00 0a	   COLOR_PF   =	$0A
     32 U0087		       00 07	   HEIGHT_PF  =	$07
     33 U0087
     34 U0087		       00 10	   PADDLE0_X_POS =	$10
     35 U0087		       00 78	   PADDLE1_X_POS =	#120
     36 U0087
     37 U0087							;╔═════════════════════════════════════════════════════════════════════════════╗
     38 U0087							;║ Macros Segment								  ║
     39 U0087							;╚═════════════════════════════════════════════════════════════════════════════╝
     40 U0087							;╔═════════════════════════════════════════════════════════════════════════════╗
     41 U0087							;║ Start of the program							  ║
     42 U0087							;╚═════════════════════════════════════════════════════════════════════════════╝
     43  10000 ????				       seg	code
     44  f000					      org	$F000
     45  f000
     46  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     48  f00b
     49  f00b							;╔═════════════════════════════════════════════════════════════════════════════╗
     50  f00b							;║ Initialization of variables and TIA registers				  ║
     51  f00b							;╚═════════════════════════════════════════════════════════════════════════════╝
     52  f00b		       a9 37		      LDA	#55
     53  f00d		       85 80		      STA	Paddle0YPos
     54  f00f		       85 81		      STA	Paddle1YPos
     55  f011
     56  f011		       a9 3c		      LDA	#60
     57  f013		       85 83		      STA	BallYPos
     58  f015		       85 82		      STA	BallXPos
     59  f017
     60  f017		       a9 00		      LDA	#$00
     61  f019		       85 84		      STA	BallYDirection
     62  f01b		       a9 ff		      LDA	#$FF
     63  f01d		       85 85		      STA	BallXDirection
     64  f01f
     65  f01f							; LDA #%00010000
     66  f01f							; STA CTRLPF
     67  f01f
     68  f01f
     69  f01f				   StartFrame
     70  f01f							;╔═════════════════════════════════════════════════════════════════════════════╗
     71  f01f							;║ Turn o VSYNC and VBLANK							  ║
     72  f01f							;╚═════════════════════════════════════════════════════════════════════════════╝
     73  f01f		       a9 02		      LDA	#02
     74  f021		       85 01		      STA	VBLANK
     75  f023		       85 00		      STA	VSYNC
     76  f025
     77  f025							;╔═════════════════════════════════════════════════════════════════════════════╗
     78  f025							;║ Generate three lines of the VSYNC 					  ║
     79  f025							;╚═════════════════════════════════════════════════════════════════════════════╝
     80  f025					      REPEAT	3
     81  f025		       85 02		      sta	WSYNC
     80  f025					      REPEND
     81  f027		       85 02		      sta	WSYNC
     80  f027					      REPEND
     81  f029		       85 02		      sta	WSYNC
     82  f02b					      REPEND
     83  f02b		       a9 00		      LDA	#0
     84  f02d		       85 00		      STA	VSYNC
     85  f02f
     86  f02f							;╔═════════════════════════════════════════════════════════════════════════════╗
     87  f02f							;║ Let the TIA output the 37 Lines of the VBLANK				  ║
     88  f02f							;╚═════════════════════════════════════════════════════════════════════════════╝
     89  f02f					      REPEAT	33
     90  f02f		       85 02		      sta	WSYNC
     89  f02f					      REPEND
     90  f031		       85 02		      sta	WSYNC
     89  f031					      REPEND
     90  f033		       85 02		      sta	WSYNC
     89  f033					      REPEND
     90  f035		       85 02		      sta	WSYNC
     89  f035					      REPEND
     90  f037		       85 02		      sta	WSYNC
     89  f037					      REPEND
     90  f039		       85 02		      sta	WSYNC
     89  f039					      REPEND
     90  f03b		       85 02		      sta	WSYNC
     89  f03b					      REPEND
     90  f03d		       85 02		      sta	WSYNC
     89  f03d					      REPEND
     90  f03f		       85 02		      sta	WSYNC
     89  f03f					      REPEND
     90  f041		       85 02		      sta	WSYNC
     89  f041					      REPEND
     90  f043		       85 02		      sta	WSYNC
     89  f043					      REPEND
     90  f045		       85 02		      sta	WSYNC
     89  f045					      REPEND
     90  f047		       85 02		      sta	WSYNC
     89  f047					      REPEND
     90  f049		       85 02		      sta	WSYNC
     89  f049					      REPEND
     90  f04b		       85 02		      sta	WSYNC
     89  f04b					      REPEND
     90  f04d		       85 02		      sta	WSYNC
     89  f04d					      REPEND
     90  f04f		       85 02		      sta	WSYNC
     89  f04f					      REPEND
     90  f051		       85 02		      sta	WSYNC
     89  f051					      REPEND
     90  f053		       85 02		      sta	WSYNC
     89  f053					      REPEND
     90  f055		       85 02		      sta	WSYNC
     89  f055					      REPEND
     90  f057		       85 02		      sta	WSYNC
     89  f057					      REPEND
     90  f059		       85 02		      sta	WSYNC
     89  f059					      REPEND
     90  f05b		       85 02		      sta	WSYNC
     89  f05b					      REPEND
     90  f05d		       85 02		      sta	WSYNC
     89  f05d					      REPEND
     90  f05f		       85 02		      sta	WSYNC
     89  f05f					      REPEND
     90  f061		       85 02		      sta	WSYNC
     89  f061					      REPEND
     90  f063		       85 02		      sta	WSYNC
     89  f063					      REPEND
     90  f065		       85 02		      sta	WSYNC
     89  f065					      REPEND
     90  f067		       85 02		      sta	WSYNC
     89  f067					      REPEND
     90  f069		       85 02		      sta	WSYNC
     89  f069					      REPEND
     90  f06b		       85 02		      sta	WSYNC
     89  f06b					      REPEND
     90  f06d		       85 02		      sta	WSYNC
     89  f06d					      REPEND
     90  f06f		       85 02		      sta	WSYNC
     91  f071					      REPEND
     92  f071
     93  f071							;┌─────────────────────────────────────────────────────────────────────────────┐
     94  f071							;│ Calculation in VBLANK							  │
     95  f071							;└─────────────────────────────────────────────────────────────────────────────┘
     96  f071		       a9 10		      LDA	#PADDLE0_X_POS
     97  f073		       a0 00		      LDY	#0
     98  f075		       20 cf f1 	      JSR	SetObjectXPos
     99  f078
    100  f078		       a9 78		      LDA	#PADDLE1_X_POS
    101  f07a		       a0 01		      LDY	#1
    102  f07c		       20 cf f1 	      JSR	SetObjectXPos
    103  f07f
    104  f07f		       a5 82		      LDA	BallXPos
    105  f081		       a0 04		      LDY	#4
    106  f083		       20 cf f1 	      JSR	SetObjectXPos
    107  f086
    108  f086		       85 02		      STA	WSYNC
    109  f088		       85 2a		      STA	HMOVE
    110  f08a
    111  f08a		       a9 00		      LDA	#0
    112  f08c		       85 01		      STA	VBLANK
    113  f08e
    114  f08e		       a5 83		      LDA	BallYPos
    115  f090		       18		      CLC
    116  f091		       65 84		      ADC	BallYDirection
    117  f093		       85 83		      STA	BallYPos
    118  f095
    119  f095				   .TestBall
    120  f095		       a5 82		      LDA	BallXPos
    121  f097		       c9 00		      CMP	#0
    122  f099		       30 07		      BMI	.ResetBallPos
    123  f09b		       c9 83		      CMP	#131
    124  f09d		       10 03		      BPL	.ResetBallPos
    125  f09f		       4c a6 f0 	      JMP	.SkipReset
    126  f0a2
    127  f0a2				   .ResetBallPos
    128  f0a2		       a9 3c		      LDA	#60
    129  f0a4		       85 82		      STA	BallXPos
    130  f0a6
    131  f0a6				   .SkipReset
    132  f0a6		       18		      CLC
    133  f0a7		       65 85		      ADC	BallXDirection
    134  f0a9		       85 82		      STA	BallXPos
    135  f0ab
    136  f0ab							;╔═════════════════════════════════════════════════════════════════════════════╗
    137  f0ab							;║ Start of the visible lines						  ║
    138  f0ab							;╚═════════════════════════════════════════════════════════════════════════════╝
    139  f0ab		       a9 a0		      LDA	#COLOR_BG
    140  f0ad		       85 09		      STA	COLUBK
    141  f0af
    142  f0af		       a9 0a		      LDA	#COLOR_PF
    143  f0b1		       85 08		      STA	COLUPF
    144  f0b3
    145  f0b3		       a2 60		      LDX	#96
    146  f0b5				   .GameLineLoop
    147  f0b5				   .DrawBall
    148  f0b5		       a9 00		      LDA	#0
    149  f0b7		       e4 83		      CPX	BallYPos
    150  f0b9		       d0 02		      BNE	.SkipBallDraw
    151  f0bb
    152  f0bb		       a9 02		      LDA	#%00000010
    153  f0bd				   .SkipBallDraw
    154  f0bd		       85 1f		      STA	ENABL
    155  f0bf
    156  f0bf							;┌─────────────────────────────────────────────────────────────────────────────┐
    157  f0bf							;│ Check if its time to draw paddle 0					  │
    158  f0bf							;└─────────────────────────────────────────────────────────────────────────────┘
    159  f0bf		       8a		      TXA
    160  f0c0		       38		      SEC
    161  f0c1		       e5 80		      SBC	Paddle0YPos
    162  f0c3		       c9 12		      CMP	#PADDLE_HEIGHT
    163  f0c5		       90 02		      BCC	.DrawPaddle0
    164  f0c7		       a9 00		      LDA	#0
    165  f0c9				   .DrawPaddle0
    166  f0c9		       a8		      TAY
    167  f0ca		       b9 e3 f1 	      LDA	Paddle0Sprite,Y
    168  f0cd		       85 02		      STA	WSYNC
    169  f0cf		       85 1b		      STA	GRP0
    170  f0d1		       b9 07 f2 	      LDA	Paddle0Color,Y
    171  f0d4		       85 06		      STA	COLUP0
    172  f0d6
    173  f0d6							;┌─────────────────────────────────────────────────────────────────────────────┐
    174  f0d6							;│ Check if its time ddo draw paddle 1					  │
    175  f0d6							;└─────────────────────────────────────────────────────────────────────────────┘
    176  f0d6		       8a		      TXA
    177  f0d7		       38		      SEC
    178  f0d8		       e5 81		      SBC	Paddle1YPos
    179  f0da		       c9 12		      CMP	#PADDLE_HEIGHT
    180  f0dc		       90 02		      BCC	.DrawPaddle1
    181  f0de		       a9 00		      LDA	#0
    182  f0e0				   .DrawPaddle1
    183  f0e0		       a8		      TAY
    184  f0e1		       b9 f5 f1 	      LDA	Paddle1Sprite,Y
    185  f0e4		       85 02		      STA	WSYNC
    186  f0e6		       85 1c		      STA	GRP1
    187  f0e8		       b9 07 f2 	      LDA	Paddle0Color,Y
    188  f0eb		       85 07		      STA	COLUP1
    189  f0ed
    190  f0ed		       ca		      DEX
    191  f0ee		       d0 c5		      BNE	.GameLineLoop
    192  f0f0		       a9 00		      LDA	#0
    193  f0f2							;╔═════════════════════════════════════════════════════════════════════════════╗
    194  f0f2							;║ Output the 30 more VBLANK overscan lines					  ║
    195  f0f2							;╚═════════════════════════════════════════════════════════════════════════════╝
    196  f0f2		       a9 02		      LDA	#2
    197  f0f4		       85 01		      STA	VBLANK
    198  f0f6					      REPEAT	28
    199  f0f6		       85 02		      STA	WSYNC
    198  f0f6					      REPEND
    199  f0f8		       85 02		      STA	WSYNC
    198  f0f8					      REPEND
    199  f0fa		       85 02		      STA	WSYNC
    198  f0fa					      REPEND
    199  f0fc		       85 02		      STA	WSYNC
    198  f0fc					      REPEND
    199  f0fe		       85 02		      STA	WSYNC
    198  f0fe					      REPEND
    199  f100		       85 02		      STA	WSYNC
    198  f100					      REPEND
    199  f102		       85 02		      STA	WSYNC
    198  f102					      REPEND
    199  f104		       85 02		      STA	WSYNC
    198  f104					      REPEND
    199  f106		       85 02		      STA	WSYNC
    198  f106					      REPEND
    199  f108		       85 02		      STA	WSYNC
    198  f108					      REPEND
    199  f10a		       85 02		      STA	WSYNC
    198  f10a					      REPEND
    199  f10c		       85 02		      STA	WSYNC
    198  f10c					      REPEND
    199  f10e		       85 02		      STA	WSYNC
    198  f10e					      REPEND
    199  f110		       85 02		      STA	WSYNC
    198  f110					      REPEND
    199  f112		       85 02		      STA	WSYNC
    198  f112					      REPEND
    199  f114		       85 02		      STA	WSYNC
    198  f114					      REPEND
    199  f116		       85 02		      STA	WSYNC
    198  f116					      REPEND
    199  f118		       85 02		      STA	WSYNC
    198  f118					      REPEND
    199  f11a		       85 02		      STA	WSYNC
    198  f11a					      REPEND
    199  f11c		       85 02		      STA	WSYNC
    198  f11c					      REPEND
    199  f11e		       85 02		      STA	WSYNC
    198  f11e					      REPEND
    199  f120		       85 02		      STA	WSYNC
    198  f120					      REPEND
    199  f122		       85 02		      STA	WSYNC
    198  f122					      REPEND
    199  f124		       85 02		      STA	WSYNC
    198  f124					      REPEND
    199  f126		       85 02		      STA	WSYNC
    198  f126					      REPEND
    199  f128		       85 02		      STA	WSYNC
    198  f128					      REPEND
    199  f12a		       85 02		      STA	WSYNC
    198  f12a					      REPEND
    199  f12c		       85 02		      STA	WSYNC
    200  f12e					      REPEND
    201  f12e		       a9 00		      LDA	#0
    202  f130		       85 01		      STA	VBLANK
    203  f132
    204  f132							;┌─────────────────────────────────────────────────────────────────────────────┐
    205  f132							;│ Input-check section							  │
    206  f132							;└─────────────────────────────────────────────────────────────────────────────┘
    207  f132				   CheckP0Up
    208  f132		       a9 10		      LDA	#16
    209  f134		       2c 80 02 	      BIT	SWCHA
    210  f137		       d0 08		      BNE	CheckP0Down
    211  f139
    212  f139		       a5 80		      LDA	Paddle0YPos
    213  f13b		       c9 64		      CMP	#100
    214  f13d		       10 02		      BPL	CheckP0Down
    215  f13f		       e6 80		      INC	Paddle0YPos
    216  f141				   CheckP0Down
    217  f141		       a9 20		      LDA	#32
    218  f143		       2c 80 02 	      BIT	SWCHA
    219  f146		       d0 08		      BNE	CheckP1Up
    220  f148
    221  f148		       a5 80		      LDA	Paddle0YPos
    222  f14a		       c9 02		      CMP	#2
    223  f14c		       30 02		      BMI	CheckP1Up
    224  f14e		       c6 80		      DEC	Paddle0YPos
    225  f150				   CheckP1Up
    226  f150		       a9 01		      LDA	#1
    227  f152		       2c 80 02 	      BIT	SWCHA
    228  f155		       d0 08		      BNE	CheckP1Down
    229  f157
    230  f157		       a5 81		      LDA	Paddle1YPos
    231  f159		       c9 64		      CMP	#100
    232  f15b		       10 02		      BPL	CheckP1Down
    233  f15d		       e6 81		      INC	Paddle1YPos
    234  f15f				   CheckP1Down
    235  f15f		       a9 02		      LDA	#2
    236  f161		       2c 80 02 	      BIT	SWCHA
    237  f164		       d0 08		      BNE	NoMoreInput
    238  f166
    239  f166		       a5 81		      LDA	Paddle1YPos
    240  f168		       c9 02		      CMP	#2
    241  f16a		       30 02		      BMI	NoMoreInput
    242  f16c		       c6 81		      DEC	Paddle1YPos
    243  f16e				   NoMoreInput
    244  f16e
    245  f16e							;┌─────────────────────────────────────────────────────────────────────────────┐
    246  f16e							;│ Ball hiting roof/top							  │
    247  f16e							;└─────────────────────────────────────────────────────────────────────────────┘
    248  f16e		       a5 83		      LDA	BallYPos
    249  f170		       c9 05		      CMP	#5
    250  f172		       90 07		      BCC	hitBottom
    251  f174		       c9 64		      CMP	#100
    252  f176		       b0 0a		      BCS	hitTop
    253  f178		       4c 86 f1 	      JMP	CheckCollisionP0BL
    254  f17b				   hitBottom
    255  f17b		       a9 01		      LDA	#$01
    256  f17d		       85 84		      STA	BallYDirection
    257  f17f		       4c 86 f1 	      JMP	CheckCollisionP0BL
    258  f182				   hitTop
    259  f182		       a9 ff		      LDA	#$FF
    260  f184		       85 84		      STA	BallYDirection
    261  f186							;┌─────────────────────────────────────────────────────────────────────────────┐
    262  f186							;│ Collision checking							  │
    263  f186							;└─────────────────────────────────────────────────────────────────────────────┘
    264  f186				   CheckCollisionP0BL
    265  f186		       a9 40		      LDA	#%01000000
    266  f188		       24 02		      BIT	CXP0FB
    267  f18a		       d0 03		      BNE	CollisionP0BL
    268  f18c		       4c 98 f1 	      JMP	CheckCollisionP1BL
    269  f18f				   CollisionP0BL
    270  f18f		       a9 01		      LDA	#$01
    271  f191		       85 85		      STA	BallXDirection
    272  f193		       a4 80		      LDY	Paddle0YPos
    273  f195		       4c aa f1 	      JMP	AjustYBall
    274  f198
    275  f198				   CheckCollisionP1BL
    276  f198		       a9 40		      LDA	#%01000000
    277  f19a		       24 03		      BIT	CXP1FB
    278  f19c		       d0 03		      BNE	CollisionP1BL
    279  f19e		       4c ca f1 	      JMP	EndCollision
    280  f1a1				   CollisionP1BL
    281  f1a1		       a9 ff		      LDA	#$FF
    282  f1a3		       85 85		      STA	BallXDirection
    283  f1a5		       a4 81		      LDY	Paddle1YPos
    284  f1a7		       4c aa f1 	      JMP	AjustYBall
    285  f1aa
    286  f1aa				   AjustYBall
    287  f1aa		       a9 12		      LDA	#PADDLE_HEIGHT
    288  f1ac		       4a		      LSR
    289  f1ad		       85 86		      STA	Temp
    290  f1af		       98		      TYA
    291  f1b0		       18		      CLC
    292  f1b1		       65 86		      ADC	Temp
    293  f1b3		       85 86		      STA	Temp
    294  f1b5		       a5 83		      LDA	BallYPos
    295  f1b7		       38		      SEC
    296  f1b8		       e5 86		      SBC	Temp
    297  f1ba		       10 03		      BPL	BallDown
    298  f1bc		       4c c6 f1 	      JMP	BallUp
    299  f1bf
    300  f1bf				   BallDown
    301  f1bf		       a9 01		      LDA	#$01
    302  f1c1		       85 84		      STA	BallYDirection
    303  f1c3		       4c ca f1 	      JMP	EndCollision
    304  f1c6				   BallUp
    305  f1c6		       a9 ff		      LDA	#$FF
    306  f1c8		       85 84		      STA	BallYDirection
    307  f1ca
    308  f1ca				   EndCollision
    309  f1ca		       85 2c		      STA	CXCLR
    310  f1cc
    311  f1cc							;╔═════════════════════════════════════════════════════════════════════════════╗
    312  f1cc							;║ End of the Program							  ║
    313  f1cc							;╚═════════════════════════════════════════════════════════════════════════════╝
    314  f1cc		       4c 1f f0 	      JMP	StartFrame
    315  f1cf
    316  f1cf							;╔═════════════════════════════════════════════════════════════════════════════╗
    317  f1cf							;║ Subroutines Segment							  ║
    318  f1cf							;╚═════════════════════════════════════════════════════════════════════════════╝
    319  f1cf							;┌─────────────────────────────────────────────────────────────────────────────┐
    320  f1cf							;│ Subroutine to handle o object horizontal position with fine offset	  │
    321  f1cf							;├─────────────────────────────────────────────────────────────────────────────┤
    322  f1cf							;│ A is the target x-coord position in pixels of our object			  │
    323  f1cf							;│ Y is the object type (0:P0, 1:P1, 2:M0, 3:M1, 4:B 			  │
    324  f1cf							;└─────────────────────────────────────────────────────────────────────────────┘
    325  f1cf				   SetObjectXPos subroutine
    326  f1cf		       85 02		      STA	WSYNC
    327  f1d1		       38		      SEC
    328  f1d2				   .Div15Loop
    329  f1d2		       e9 0f		      SBC	#15
    330  f1d4		       b0 fc		      BCS	.Div15Loop
    331  f1d6		       49 07		      EOR	#7
    332  f1d8		       0a		      ASL
    333  f1d9		       0a		      ASL
    334  f1da		       0a		      ASL
    335  f1db		       0a		      ASL
    336  f1dc		       99 20 00 	      STA	HMP0,Y
    337  f1df		       99 10 00 	      STA	RESP0,Y
    338  f1e2		       60		      RTS
    339  f1e3
    340  f1e3							;╔═════════════════════════════════════════════════════════════════════════════╗
    341  f1e3							;║ Lookups Segment								  ║
    342  f1e3							;╚═════════════════════════════════════════════════════════════════════════════╝
    343  f1e3				   Paddle0Sprite
    344  f1e3		       00		      .byte.b	#%00000000
    345  f1e4		       e0		      .byte.b	#%11100000
    346  f1e5		       e0		      .byte.b	#%11100000
    347  f1e6		       e0		      .byte.b	#%11100000
    348  f1e7		       e0		      .byte.b	#%11100000
    349  f1e8		       e0		      .byte.b	#%11100000
    350  f1e9		       e0		      .byte.b	#%11100000
    351  f1ea		       e0		      .byte.b	#%11100000
    352  f1eb		       e0		      .byte.b	#%11100000
    353  f1ec		       e0		      .byte.b	#%11100000
    354  f1ed		       e0		      .byte.b	#%11100000
    355  f1ee		       e0		      .byte.b	#%11100000
    356  f1ef		       e0		      .byte.b	#%11100000
    357  f1f0		       e0		      .byte.b	#%11100000
    358  f1f1		       e0		      .byte.b	#%11100000
    359  f1f2		       e0		      .byte.b	#%11100000
    360  f1f3		       e0		      .byte.b	#%11100000
    361  f1f4		       e0		      .byte.b	#%11100000
    362  f1f5
    363  f1f5		       00 12	   PADDLE_HEIGHT =	. - Paddle0Sprite
    364  f1f5
    365  f1f5				   Paddle1Sprite
    366  f1f5		       00		      .byte.b	#%00000000
    367  f1f6		       07		      .byte.b	#%00000111
    368  f1f7		       07		      .byte.b	#%00000111
    369  f1f8		       07		      .byte.b	#%00000111
    370  f1f9		       07		      .byte.b	#%00000111
    371  f1fa		       07		      .byte.b	#%00000111
    372  f1fb		       07		      .byte.b	#%00000111
    373  f1fc		       07		      .byte.b	#%00000111
    374  f1fd		       07		      .byte.b	#%00000111
    375  f1fe		       07		      .byte.b	#%00000111
    376  f1ff		       07		      .byte.b	#%00000111
    377  f200		       07		      .byte.b	#%00000111
    378  f201		       07		      .byte.b	#%00000111
    379  f202		       07		      .byte.b	#%00000111
    380  f203		       07		      .byte.b	#%00000111
    381  f204		       07		      .byte.b	#%00000111
    382  f205		       07		      .byte.b	#%00000111
    383  f206		       07		      .byte.b	#%00000111
    384  f207
    385  f207				   Paddle0Color
    386  f207		       00		      .byte.b	#$00
    387  f208		       0a		      .byte.b	#$0A
    388  f209		       0a		      .byte.b	#$0A
    389  f20a		       0a		      .byte.b	#$0A
    390  f20b		       0a		      .byte.b	#$0A
    391  f20c		       0a		      .byte.b	#$0A
    392  f20d		       0a		      .byte.b	#$0A
    393  f20e		       0a		      .byte.b	#$0A
    394  f20f		       0a		      .byte.b	#$0A
    395  f210		       0a		      .byte.b	#$0A
    396  f211		       0a		      .byte.b	#$0A
    397  f212		       0a		      .byte.b	#$0A
    398  f213		       0a		      .byte.b	#$0A
    399  f214		       0a		      .byte.b	#$0A
    400  f215		       0a		      .byte.b	#$0A
    401  f216		       0a		      .byte.b	#$0A
    402  f217		       0a		      .byte.b	#$0A
    403  f218		       0a		      .byte.b	#$0A
    404  f219
    405  f219							;╔═════════════════════════════════════════════════════════════════════════════╗
    406  f219							;║ Setting Reset memory							  ║
    407  f219							;╚═════════════════════════════════════════════════════════════════════════════╝
    408  fffc					      org	$FFFC
    409  fffc		       00 f0		      .word.w	Reset
    410  fffe		       00 f0		      .word.w	Reset
